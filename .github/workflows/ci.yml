name: CI

on:
  push:
    branches:
      - master
      - prerelease
    tags:
      - '**'
  pull_request: {}

jobs:

  env-check:
    if: github.repository == 'matutter/foremon'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    environment: pypi
    steps:

    - name: Check environment variables
      run: |
        test -n "$TWINE_USERNAME" && echo TWINE_USERNAME OK
        test -n "$TWINE_PASSWORD" && echo TWINE_PASSWORD OK
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPY_TOKEN }}

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:

    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: "3.8"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel
        pip install -r requirements.txt

    - name: Build
      run: |
        python -m build

    - name: Store dist artifacts
      uses: actions/upload-artifact@v2
      with:
        name: pypi_files
        path: dist

    - name: Store dist artifacts for testing
      uses: actions/upload-artifact@v2
      with:
        name: test_files
        path: |
          dist/
          config/
          tests/expect/

  test:
    needs: [build]
    timeout-minutes: 15
    name: test ${{ matrix.tox_env }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        name: [ "ubuntu-py36",
                "ubuntu-py37",
                "ubuntu-py38",
                "ubuntu-py39"]
        include:
          - name: "ubuntu-py36"
            python: "3.6"
            os: ubuntu-latest
            tox_env: "py36"

          - name: "ubuntu-py37"
            python: "3.7"
            os: ubuntu-latest
            tox_env: "py37"

          - name: "ubuntu-py38"
            python: "3.8"
            os: ubuntu-latest
            tox_env: "py38"

          - name: "ubuntu-py39"
            python: "3.9"
            os: ubuntu-latest
            tox_env: "py39"

          # - name: "ubuntu-py310"
          #   python: "3.10"
          #   os: ubuntu-latest
          #   tox_env: "py310"
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel
        pip install tox coverage
      env:
        # default is 5, but we are sensitive to IO and task lag on runners
        EXPECT_TIMEOUT: "15.0"

    - name: Run tox
      run: "tox -e ${{ matrix.tox_env }}"

  # Test the package with expect via installing it as a src-dist and wheel
  expect-test:
    needs: [build]
    timeout-minutes: 15
    name: test foremon ${{ matrix.name }} dist on ubuntu-latest
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        name: [ "source", "wheel" ]
        include:
          - name: "source"
            pattern: "foremon*.tar.gz"
          - name: "wheel"
            pattern: "foremon*.whl"
    steps:

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: "3.8"

    - name: Download disk artifacts
      uses: actions/download-artifact@v2
      id: download
      with:
        name: test_files
        path: files

    - name: Install foremon ${{ matrix.name }} dist
      run: pip install ${{steps.download.outputs.download-path}}/dist/${{ matrix.pattern }}

    - name: Install expect
      run: |
        sudo apt-get update -y
        sudo apt-get install expect

    - name: Run expect tests
      run: |
        mv ${{steps.download.outputs.download-path}}/config config/
        for f in `ls -1 ${{steps.download.outputs.download-path}}/tests/expect/*.exp`; do expect $f; done


  coverage:
    needs: [build]
    name: coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: "3.8"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel
        pip install -r requirements.txt

    - name: Test with coverage
      run: |
        pytest --cov=foremon

  deploy:
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags') && github.repository == 'matutter/foremon'
    needs: [build, test, expect-test, coverage]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: pypi
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: "3.8"

    - name: Download disk artifacts
      uses: actions/download-artifact@v2
      with:
        name: pypi_files
        path: dist

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel
        pip install twine

    - name: Twine Check
      run: |
        twine check dist/*
        ls -lh dist

    - name: Upload to PyPi
      run: |
        twine upload dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPY_TOKEN }}
